package io.swagger.petstore.asserts;

import io.swagger.petstore.entities.Category;
import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link Category} specific assertions - Generated by CustomAssertionGenerator.
 */
public class CategoryAssert extends AbstractAssert<CategoryAssert, Category> {

    /**
     * Creates a new <code>{@link CategoryAssert}</code> to make assertions on actual Category.
     *
     * @param actual the Category we want to make assertions on.
     */
    private CategoryAssert(Category actual) {
        super(actual, CategoryAssert.class);
    }

    /**
     * An entry point for CategoryAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
     * With a static import, one can write directly: <code>assertThat(myCategory)</code> and get specific assertion with code completion.
     *
     * @param actual the Category we want to make assertions on.
     * @return a new <code>{@link CategoryAssert}</code>
     */
    public static CategoryAssert assertThat(Category actual) {
        return new CategoryAssert(actual);
    }

    /**
     * Verifies that the actual Category's id is equal to the given one.
     *
     * @param id the given id to compare the actual Category's id to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Category's id is not equal to the given one.
     */
    public CategoryAssert hasId(int id) {
        // check that actual Category we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // check
        int actualId = actual.getId();
        if (actualId != id) {
            failWithMessage(assertjErrorMessage, actual, id, actualId);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual Category's name is equal to the given one.
     *
     * @param name the given name to compare the actual Category's name to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Category's name is not equal to the given one.
     */
    public CategoryAssert hasName(String name) {
        // check that actual Category we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualName = actual.getName();
        if (!Objects.areEqual(actualName, name)) {
            failWithMessage(assertjErrorMessage, actual, name, actualName);
        }

        // return the current assertion for method chaining
        return this;
    }

}
